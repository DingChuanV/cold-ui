{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport api from \"@/api\";\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      username: '',\n      password: '',\n      loading: false // 加载状态\n    };\n  },\n  methods: {\n    async login() {\n      // 检查用户名和密码是否为空\n      if (!this.username || !this.password) {\n        console.error('用户名和密码不能为空');\n        return;\n      }\n      try {\n        this.loading = true; // 设置加载状态为true\n        const loginUrl = await api.getLogin(); // 等待获取登录路径\n        const response = await axios.post(loginUrl, {\n          username: this.username,\n          password: this.password\n        }, {\n          headers: {\n            'Content-Type': 'application/json' // 设置请求头为 application/json\n          }\n        });\n        if (response.data.status === 'ok') {\n          // 获取到 token\n          const token = response.data.token;\n\n          // 将 token 存储到本地存储中，或者 Vuex 状态管理中，以便后续使用\n          localStorage.setItem('token', token);\n\n          // 设置全局请求头\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n          // 登录成功后进行路由导航\n          await this.$router.push('/system'); // 修正此处\n\n          // 登录成功的处理逻辑.\n          console.log('登录成功');\n        } else {\n          // 登录失败的处理逻辑\n          console.error('登录失败');\n        }\n      } catch (error) {\n        console.error('登录请求出错', error);\n      } finally {\n        this.loading = false; // 无论请求成功还是失败，都将加载状态重置为false\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","api","name","data","username","password","loading","methods","login","console","error","loginUrl","getLogin","response","post","headers","status","token","localStorage","setItem","defaults","common","$router","push","log"],"sources":["/Users/dingchuan/Documents/Repos/cold-ui/src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"global-background\">\n    <div class=\"login-container\">\n      <h3>冷链物流监控数据管理系统</h3>\n      <form @submit.prevent=\"login\">\n        <div class=\"form-group\">\n          <input v-model=\"username\" type=\"text\" placeholder=\"username\"/>\n        </div>\n        <div class=\"form-group\">\n          <input v-model=\"password\" type=\"password\" placeholder=\"password\"/>\n        </div>\n        <button type=\"submit\" :disabled=\"loading || !username || !password\">{{ loading ? '正在登录...' : '登录' }}</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport api from \"@/api\";\n\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      username: '',\n      password: '',\n      loading: false // 加载状态\n    };\n  },\n  methods: {\n    async login() {\n      // 检查用户名和密码是否为空\n      if (!this.username || !this.password) {\n        console.error('用户名和密码不能为空');\n        return;\n      }\n\n      try {\n        this.loading = true; // 设置加载状态为true\n        const loginUrl = await api.getLogin(); // 等待获取登录路径\n        const response = await axios.post(loginUrl, {\n          username: this.username,\n          password: this.password\n        }, {\n          headers: {\n            'Content-Type': 'application/json' // 设置请求头为 application/json\n          }\n        });\n\n        if (response.data.status === 'ok') {\n          // 获取到 token\n          const token = response.data.token;\n\n          // 将 token 存储到本地存储中，或者 Vuex 状态管理中，以便后续使用\n          localStorage.setItem('token', token);\n\n          // 设置全局请求头\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n          // 登录成功后进行路由导航\n          await this.$router.push('/system'); // 修正此处\n\n          // 登录成功的处理逻辑.\n          console.log('登录成功');\n        } else {\n          // 登录失败的处理逻辑\n          console.error('登录失败');\n        }\n      } catch (error) {\n        console.error('登录请求出错', error);\n      } finally {\n        this.loading = false; // 无论请求成功还是失败，都将加载状态重置为false\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.global-background {\n  margin: 0;\n  background-image: url(\"http://127.0.0.1:8080/cold.png\"); /* 设置全局背景颜色 */\n  background-size: cover; /* 将背景图片全屏显示 */\n  height: 100vh; /* 将高度设置为视窗高度 */\n  display: flex;\n  justify-content: center; /* 水平居中 */\n  align-items: center; /* 垂直居中 */\n}\n\n.login-container {\n  background-color: #fff; /* 登录容器背景颜色 */\n  padding: 20px;\n  border-radius: 10px;\n}\n\nh3 {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"] {\n  padding: 10px;\n  width: 250px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  outline: none;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 15px;\n  cursor: pointer;\n  outline: none;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\nbutton:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n</style>\n"],"mappings":";AAkBA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,GAAE,MAAO,OAAO;AAEvB,eAAe;EACbC,IAAI,EAAE,OAAO;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,KAAI,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ;MACA,IAAI,CAAC,IAAI,CAACJ,QAAO,IAAK,CAAC,IAAI,CAACC,QAAQ,EAAE;QACpCI,OAAO,CAACC,KAAK,CAAC,YAAY,CAAC;QAC3B;MACF;MAEA,IAAI;QACF,IAAI,CAACJ,OAAM,GAAI,IAAI,EAAE;QACrB,MAAMK,QAAO,GAAI,MAAMV,GAAG,CAACW,QAAQ,CAAC,CAAC,EAAE;QACvC,MAAMC,QAAO,GAAI,MAAMb,KAAK,CAACc,IAAI,CAACH,QAAQ,EAAE;UAC1CP,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC,EAAE;UACDU,OAAO,EAAE;YACP,cAAc,EAAE,kBAAiB,CAAE;UACrC;QACF,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAACV,IAAI,CAACa,MAAK,KAAM,IAAI,EAAE;UACjC;UACA,MAAMC,KAAI,GAAIJ,QAAQ,CAACV,IAAI,CAACc,KAAK;;UAEjC;UACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;;UAEpC;UACAjB,KAAK,CAACoB,QAAQ,CAACL,OAAO,CAACM,MAAM,CAAC,eAAe,IAAK,UAASJ,KAAM,EAAC;;UAElE;UACA,MAAM,IAAI,CAACK,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC,EAAE;;UAEpC;UACAd,OAAO,CAACe,GAAG,CAAC,MAAM,CAAC;QACrB,OAAO;UACL;UACAf,OAAO,CAACC,KAAK,CAAC,MAAM,CAAC;QACvB;MACF,EAAE,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC,UAAU;QACR,IAAI,CAACJ,OAAM,GAAI,KAAK,EAAE;MACxB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}